#!/bin/bash
set -e

limit=10

filtered_prs_query=''

requested_prs_query='is:open is:pr review-requested:@me'

created_prs_query='is:open is:pr author:@me'

mentioned_prs_query='is:open is:pr mentions:@me'

org=''

show_help() {
  cat <<-EOF
This extension helps you to check pull requests which you need to respond.

USAGE
  $ gh prs [flags]

FLAGS
  -r, --review-requested    Filter by review requested to others
  -c, --created             Filter by created by myself 
  -m, --mentioned           Filter by mentioned to me
  -l, --limit               Maximum number of items to fetch (default 10)
  -h, --help                Show help

EXAMPLES
  $ gh prs
  $ gh prs -l 20
  $ gh prs -r
  $ gh prs -c
  $ gh prs -m -l 15
EOF
}

show_filtered_prs() {
  local query='
  query ($q: String!, $limit: Int = 10) {
    search(first: $limit, type: ISSUE, query: $q) {
      nodes {
        ... on PullRequest {
          number
          title
          url
          updatedAt
          repository {
            name
          }
        }
      }
    }
  }
  '

  local template='
{{- range $pr := .data.search.nodes -}}
  {{- tablerow (printf "#%v" .number | autocolor "green") (truncate 40 .title) (.url | autocolor "cyan") (.updatedAt | timeago | autocolor "white")  -}}
{{- end -}}

{{ if eq (len .data.search.nodes) 0 }}
{{- printf "No pull requests match your filter" -}}
{{ else }}
{{- tablerender -}}
{{ end }}
'

  gh api graphql -F q="$1" -F limit="$limit" -f query="$query" --template="$template"
}

show_prs() {
  local query='
  fragment pr on PullRequest {
    ... on PullRequest {
      number
      title
      url
      updatedAt
      repository {
        name
      }
    }
  }

  query ($createdPRQuery: String!, $requestedPRQuery: String!, $mentionedPRQuery: String!, $limit: Int = 10) {
    createdPR: search(first: $limit, type: ISSUE, query: $createdPRQuery) {
      nodes {
        ...pr
      }
    }
    requestedPR: search(first: $limit, type: ISSUE, query: $requestedPRQuery) {
      nodes {
        ...pr
      }
    }
    mentionedPR: search(first: $limit, type: ISSUE, query: $mentionedPRQuery) {
      nodes {
        ...pr
      }
    }
  }
  '

  local template='
{{- printf "ðŸ‘€ Review requested pull requests\n\n" | autocolor "magenta+b" -}}

{{- range $pr := .data.requestedPR.nodes -}}
  {{- tablerow (printf "#%v" .number | autocolor "green") (truncate 40 .title) (.url | autocolor "cyan") (.updatedAt | timeago | autocolor "white")  -}}
{{- end -}}

{{ if eq (len .data.requestedPR.nodes) 0 }}
{{- printf "No review requested pull requests\n" -}}
{{ else }}
{{- tablerender -}}
{{ end }}

{{- printf "\nâœ‹ Mentioned pull requests\n\n" | autocolor "magenta+b" -}}

{{- range $pr := .data.mentionedPR.nodes -}}
  {{- tablerow (printf "#%v" .number | autocolor "green") (truncate 40 .title) (.url | autocolor "cyan") (.updatedAt | timeago | autocolor "white")  -}}
{{- end -}}

{{ if eq (len .data.mentionedPR.nodes) 0 }}
{{- printf "No mentioned pull requests\n" -}}
{{ else }}
{{- tablerender -}}
{{ end }}

{{- printf "\nðŸ“‚ Created pull requests\n\n" | autocolor "magenta+b" -}}

{{- range $pr := .data.createdPR.nodes -}}
  {{- tablerow (printf "#%v" .number | autocolor "green") (truncate 40 .title) (.url | autocolor "cyan") (.updatedAt | timeago | autocolor "white")  -}}
{{- end -}}

{{ if eq (len .data.createdPR.nodes) 0 }}
{{- printf "No created pull requests\n" -}}
{{ else }}
{{- tablerender -}}
{{ end }}
'

  gh api graphql -F createdPRQuery="$1" \
    -F requestedPRQuery="$2" \
    -F mentionedPRQuery="$3" \
    -F limit="$limit" \
    -f query="$query" \
    --template="$template"
}

while [ $# -gt 0 ]; do
  case "$1" in
  -r|--review-requested)
    filtered_prs_query="$requested_prs_query"
    ;;
  -c|--created)
    filtered_prs_query="$created_prs_query"
    ;;
  -m|--mentioned)
    filtered_prs_query="$mentioned_prs_query"
    ;;
  -h|--help)
    show_help
    exit 0
    ;;
  -l|--limit)
    limit=$2
    ;;
  -o|--org)
    org=$2
    ;;
  esac
  shift
done

if [ -n "$filtered_prs_query" ] ; then
  if [ -n "$org" ] ; then
    show_filtered_prs "$filtered_prs_query org:$org"
    exit 0
  fi

  show_filtered_prs "$filtered_prs_query"
  exit 0
fi

if [ -n "$org" ] ; then
  show_prs "$created_prs_query org:$org" "$requested_prs_query org:$org" "$mentioned_prs_query org:$org"
  exit 0
fi

show_prs "$created_prs_query" "$requested_prs_query" "$mentioned_prs_query"
